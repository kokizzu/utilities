package main

// mkbadge

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/nickwells/gogen.mod/gogen"
	"github.com/nickwells/param.mod/v5/param"
	"github.com/nickwells/param.mod/v5/param/paramset"
	"github.com/nickwells/param.mod/v5/param/psetter"
	"github.com/nickwells/versionparams.mod/versionparams"
)

// Created: Fri Sep 25 18:29:06 2020

var twitterAC string

var noComment bool

func main() {
	ps := paramset.NewOrDie(
		versionparams.AddParams,

		addParams,

		SetGlobalConfigFile,
		SetConfigFile,

		param.SetProgramDescription(
			"This will print the markdown for displaying badges"+
				" in your README.md file."+
				" It will also print bracketing comments with the"+
				" expectation that it can be used in a script to"+
				" automatically maintain the badges."),
	)

	ps.Parse()

	const githubPfx = "github.com/"

	module := gogen.GetModuleOrDie()

	trimSemver := regexp.MustCompile(`/v([2-9]|[1-9][0-9]+)$`)
	repo := trimSemver.ReplaceAllLiteralString(module, "")

	comment("START")

	fmt.Println("[" +
		"![go.dev reference]" +
		"(https://img.shields.io/badge/go.dev-reference-green?logo=go)" +
		"]" +
		"(https://pkg.go.dev/mod/" + module + ")")

	fmt.Println("[" +
		"![Go Report Card]" +
		"(https://goreportcard.com/badge/" + module + ")]" +
		"(https://goreportcard.com/report/" + module + ")")

	if strings.HasPrefix(repo, githubPfx) {
		fmt.Println("![GitHub License]" +
			"(https://img.shields.io/github/license/" +
			strings.TrimPrefix(repo, githubPfx) +
			")")
	}

	if twitterAC != "" {
		fmt.Println("![Twitter Follow]" +
			"(https://img.shields.io/twitter/follow/" +
			twitterAC +
			"?style=social)")
	}

	comment("END")
}

// comment prints a comment line with the passed string at the end (if it
// isn't empty)
func comment(s string) {
	if noComment {
		return
	}
	fmt.Println("<!-- Code generated by mkbadge; DO NOT EDIT. " + s + " -->")
}

// addParams will add parameters to the passed ParamSet
func addParams(ps *param.PSet) error {
	ps.Add("twitter-account", psetter.String{Value: &twitterAC},
		"The name of an associated twitter account",
		param.AltNames("twitter-ac", "twitter"),
	)

	ps.Add("no-comment", psetter.Bool{Value: &noComment},
		"suppress the printing of the markdown comments",
	)

	return nil
}
