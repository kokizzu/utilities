// mkparamfilefunc
package main

import (
	"bufio"
	"fmt"
	"log"
	"os/exec"
	"strings"

	"github.com/nickwells/check.mod/check"
	"github.com/nickwells/param.mod/v3/param"
	"github.com/nickwells/param.mod/v3/param/paramset"
	"github.com/nickwells/param.mod/v3/param/psetter"
)

// Created: Sat May 25 16:13:02 2019

var outputFileName = "setConfigFile.go"

func main() {
	ps := paramset.NewOrDie(addParams,
		param.SetProgramDescription(`This creates a file defining functions which set the default parameter file for the package or program. These can be passed as another argument to the call where you create the parameter set. The paths of the files are derived from the XDG config directories and from the import path of the package.`),
	)

	ps.Parse()

	cmd := exec.Command("go", "list", "-f", "{{.ImportPath}}\n{{.Name}}")
	stdout, err := cmd.StdoutPipe()
	if err != nil {
		log.Fatal(err)
	}
	if err := cmd.Start(); err != nil {
		log.Fatal(err)
	}
	scanner := bufio.NewScanner(stdout)
	var importPath string
	var pkgName string
	if scanner.Scan() {
		importPath = scanner.Text()
	} else {
		log.Fatal("can't read the package import path")
	}
	if scanner.Scan() {
		pkgName = scanner.Text()
	} else {
		log.Fatal("can't read the package name")
	}
	if err := cmd.Wait(); err != nil {
		log.Fatal(err)
	}

	paramFileParts := strings.Split(importPath, "/")
	lastIdx := len(paramFileParts) - 1
	paramFileParts[lastIdx] = paramFileParts[lastIdx] + ".config"

	fmt.Println("package", pkgName)
	fmt.Print(`
/*
This code was generated by mkparamfilefunc

DO NOT EDIT
*/

import (
	"filepath"

	"github.com/nickwells/filecheck.mod/filecheck"
	"github.com/nickwells/param.mod/v3/param"
	"github.com/nickwells/xdg.mod/xdg"
)

func SetConfigFile(ps *param.PSet) error {
	ps.AddConfigFile(
		filepath.Join(xdg.ConfigHome(),
			`)
	sep := ""
	for _, p := range paramFileParts {
		fmt.Printf("%s%q", sep, p)
		sep = ",\n\t\t\t"
	}
	fmt.Print(`),
		filecheck.Optional)
	return nil
}
`)
	fmt.Print(`
func SetGlobalConfigFile(ps *param.PSet) error {
	dirs := xdg.ConfigDirs()
	if len(dirs) > 0 {
		ps.AddConfigFile(
			filepath.Join(dirs[0],
				`)
	sep = ""
	for _, p := range paramFileParts {
		fmt.Printf("%s%q", sep, p)
		sep = ",\n\t\t\t\t"
	}
	fmt.Print(`),
			filecheck.Optional)
	}
	return nil
}
`)
}

// addParams will add parameters to the passed ParamSet
func addParams(ps *param.PSet) error {
	ps.Add("output-file-name",
		psetter.Pathname{
			Value: &outputFileName,
			Checks: []check.String{
				check.StringHasSuffix(".go"),
			},
		},
		"set the name of the output file",
		param.AltName("o"),
	)

	return nil
}
