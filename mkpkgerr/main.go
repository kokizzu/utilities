// mkpkgerr
package main

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"strings"

	"github.com/nickwells/check.mod/check"
	"github.com/nickwells/param.mod/v3/param"
	"github.com/nickwells/param.mod/v3/param/paramset"
	"github.com/nickwells/param.mod/v3/param/psetter"
)

// Created: Fri Jan 17 18:31:18 2020

const (
	dfltFileName = "pkg_err_type.go"
)

var dontMakeFile bool
var outputFileName = dfltFileName

func main() {
	ps := paramset.NewOrDie(
		addParams,
		param.SetProgramDescription(
			"This creates a file defining a package-specific error type"),
	)

	ps.Parse()

	pkgName := goList()
	var goFile = openGoFile(outputFileName, dontMakeFile)

	printFile(goFile, pkgName)

	goFile.Close()
}

// openGoFile creates the file, truncating it if it already exists and
// returning the open file. If an error is detected, it is reported and the
// program aborts.
func openGoFile(filename string, dontMakeFile bool) *os.File {
	if dontMakeFile {
		return os.Stdout
	}

	f, err := os.Create(filename)
	if err != nil {
		fmt.Fprint(os.Stderr, err)
		os.Exit(1)
	}
	return f
}

// goList runs the go list command to discover the package name
func goList() (pkgName string) {
	cmd := exec.Command("go", "list", "-f", "{{.Name}}")
	stdout, err := cmd.StdoutPipe()
	if err != nil {
		fmt.Fprint(os.Stderr, err)
		os.Exit(1)
	}
	if err := cmd.Start(); err != nil {
		fmt.Fprint(os.Stderr, err)
		os.Exit(1)
	}
	scanner := bufio.NewScanner(stdout)

	if scanner.Scan() {
		pkgName = scanner.Text()
	} else {
		fmt.Fprint(os.Stderr, "can't read the package name")
		os.Exit(1)
	}

	if err := cmd.Wait(); err != nil {
		fmt.Fprint(os.Stderr, err)
		os.Exit(1)
	}
	return pkgName
}

// prinFile prints the file contents
func printFile(f *os.File, pkgName string) {
	capitalPkg := strings.Title(pkgName)
	idFuncName := capitalPkg + "Error()"

	fmt.Fprintln(f, "package", pkgName)
	fmt.Fprint(f, `
/*
This code was generated by mkpkgerr

DO NOT EDIT
*/

type Error interface {
	error

	// `+idFuncName+` is a no-op function but it serves to
	// distinguish errors from this package from other errors
	`+idFuncName+`
}

type pkgError string

// Error returns the string form of the error with an appropriate prefix
func (e pkgError) Error() string {
	return "`+pkgName+` error: " + string(e)
}

func (e pkgError) `+idFuncName+` {}`)
}

// addParams will add parameters to the passed ParamSet
func addParams(ps *param.PSet) error {
	ps.Add("output-file-name",
		psetter.Pathname{
			Value: &outputFileName,
			Checks: []check.String{
				check.StringHasSuffix(".go"),
				check.StringNot(
					check.StringHasSuffix("_test.go"),
					"a test file"),
			},
		},
		"set the name of the output file",
		param.AltName("o"),
		param.Attrs(param.DontShowInStdUsage),
	)

	ps.Add("no-file", psetter.Bool{Value: &dontMakeFile},
		"don't create the go file, instead just print the content to"+
			" standard out. This is useful for debugging or just to "+
			"see what would have been produced",
		param.Attrs(param.DontShowInStdUsage),
	)

	return nil
}
